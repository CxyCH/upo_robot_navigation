<!-- -*- mode: XML -*- -->

<launch>
	<master auto="start"/>

  <param name="/use_sim_time" value="true"/>


  <!-- Run Stage Simulator -->
   <node pkg="upo_stage_ros" type="upo_stageros" name="upo_stage" args="$(find upo_launchers)/elderly_center/yield/teresa_lesArcades_bigdoor.world" respawn="false" output="screen" >
    <param name="base_watchdog_timeout" value="0.2"/>
	<param name="fiducials_frame" value="odom" />
  </node>
  
  <!-- Run the map server -->
  <node pkg="map_server" type="map_server" name="map_server" args="$(find upo_launchers)/elderly_center/yield/LesArcades-bigdoor.yaml" /> <!--$(find upo_launchers)/LesArcades/maps/LesArcades-no_chairs.yaml-->


  <node pkg="laser_assembler" type="laser_assembler" name="laser_assembler" args="/base_scan_0 /base_scan_1">
	<remap from="scan" to="scan360"/>
  </node>


  <!--- amcl -->
  <node pkg="amcl" type="amcl" name="amcl" args="scan:=/scan360">
	<param name="use_map_topic" value="true" />
    <param name="odom_model_type" value="diff"/>
    <param name="transform_tolerance" value="0.9" /> <!--"0.2" />-->
    <param name="gui_publish_rate" value="10.0"/>
    <param name="laser_max_beams" value="50"/>
    <param name="min_particles" value="200"/> <!--200-->
    <param name="max_particles" value="1000"/> <!--1000-->
    <param name="kld_err" value="0.05"/>
    <param name="kld_z" value="0.99"/>
    <param name="odom_alpha1" value="0.2"/><!-- 0.1 def:0.2 -->
    <param name="odom_alpha2" value="0.1"/><!-- 0.1 def:0.2 -->
    <!-- translation std dev, m -->
    <param name="odom_alpha3" value="0.2"/><!--0.8 def:0.2 -->
    <param name="odom_alpha4" value="0.1"/><!--def:0.2 -->
    <param name="odom_alpha5" value="0.0"/>
    <param name="laser_max_range" value="10"/> <!-- new -->
    <param name="laser_min_range" value="0.5"/> <!-- new -->
    <param name="laser_z_hit" value="0.85"/> <!-- 0.5 -->
    <param name="laser_z_short" value="0.05"/>
    <param name="laser_z_max" value="0.05"/>
    <param name="laser_z_rand" value="0.05"/> <!-- 0.5 -->
    <param name="laser_sigma_hit" value="0.05"/> <!-- 0.05  default:0.2-->
    <param name="laser_lambda_short" value="0.1"/>
    <param name="laser_model_type" value="likelihood_field"/>
    <!-- <param name="laser_model_type" value="beam"/> -->
    <param name="laser_likelihood_max_dist" value="2.0"/>
    <param name="update_min_d" value="0.3"/>
    <param name="update_min_a" value="0.2"/>
    <param name="odom_frame_id" value="/odom"/>
    <param name="base_frame_id" value="/base_link"/>
    <param name="global_frame_id" value="/map"/>
    <param name="resample_interval" value="2"/>
    <param name="recovery_alpha_slow" value="0"/> <!--0.001--><!-- 0 -->
    <param name="recovery_alpha_fast" value="0"/> <!--0.1--><!-- 0 -->
    <param name="initial_pose_x" value="9" /> <!--11.1-->
    <param name="initial_pose_y" value="12" /> <!--5.2-->
    <param name="initial_pose_a" value="0" /><!-- -2.79 radians -->
  </node>

   <!--Rviz tool visualizer -->
   <node pkg="rviz" type="rviz" name="rviz" args="-d $(find upo_launchers)/rrt_navigation.rviz" />

     <!-- launch-prefix="xterm -e gdb (doble hyphen)args"-->
	 <node pkg="upo_navigation_macro_actions" type="upo_navigation_macro_actions" name="upo_navigation_macro_actions" output="screen"  >

		<!-- frecuency of checking the block situation (seconds)-->
		<param name="secs_to_check_block" type="double" value="20.0" /> 
		<!-- minimum distance that the robot should have moved in "secs_to_check_block" time from 
		its position to determine a blocked situation -->
		<param name="block_dist" type="double" value="0.4" /> 
		<!--Time (seconds) for waiting action until checking if path cleared or not -->
		<param name="secs_to_wait" type="double" value="8.0" />


		<!-- Take into account the person orientation or group orientation to perform an approach -->
		<param name="social_approaching_type" value="1" />
		
		<!-- frequency of the macro actions -->
		<param name="control_frequency" value="15.0" />

		<!-- yaml file of the map with the yield areas -->
		<param name="yield_map" type="str" value="$(find upo_launchers)/elderly_center/yield/LesArcades-yield.yaml" />
		<!-- yaml file with the coordinates of the points to wait for yielding -->
		<param name="yield_points" type="str" value="$(find upo_launchers)/elderly_center/yield/yield_points.yaml" />
		<!--Time (seconds) for yielding action until checking if path cleared or not -->
		<param name="secs_to_yield" type="double" value="8.0" />


		<param name="check_battery_level" type="bool" value="false" />
		<param name="battery_topic" type="str" value="/teresa_diagnostics" /> <!--/batteries-->


		<remap from="/upo_navigation_simple/goal" to="/move_base_simple/goal" />
		<rosparam file="$(find upo_launchers)/params_sim/navigation_params.yaml" command="load"  />
		<rosparam file="$(find upo_launchers)/params_sim/costmap_common_params.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find upo_launchers)/params_sim/costmap_common_params.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find upo_launchers)/params_sim/local_costmap_params.yaml" command="load"  />
		<rosparam file="$(find upo_launchers)/params_sim/global_costmap_params.yaml" command="load" />

	</node>


	<param name="robot_description"
    command="$(find xacro)/xacro.py '$(find teresa_gazebo)/urdf/teresa_robot.urdf.xacro'" />

  	<!-- send fake joint values -->
  	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    	<param name="use_gui" value="FALSE"/>
  	</node>

  	<!-- Combine joint values -->
  	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/>

</launch>
