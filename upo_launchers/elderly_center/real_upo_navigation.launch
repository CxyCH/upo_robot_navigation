<!-- -*- mode: XML -*- -->

<launch>
  <master auto="start"/>
  

  <!--turn on the laser and launch them-->
  <include file="$(find teresa_driver)/launch/lasers.launch" />

  <!--launch the xtion cameras-->
  <include file="$(find teresa_driver)/launch/xtions.launch" />
  <!--laser generated from the navigation xtion-->
  <include file="$(find depthcamscan)/launch/depthcamscan.launch"/>

  <!--transform people receive to UPO messages format-->
  <node pkg="spencer_to_upo_people" type="spencer_to_upo_people" name="spencer_to_upo_people" output="screen" />


  <!-- Run the map server -->
  <node pkg="map_server" type="map_server" name="map_server" args="$(find upo_launchers)/elderly_center/maps/LesArcades-no_chairs.yaml" />


  <!--<include file="$(find teresa_to_spencer)/launch/laser_filter.launch" >
 	<arg name="use_360" value="false"/>
  </include>

  <node pkg="laser_assembler" type="laser_assembler" name="laser_assembler2" args="/scanfront_filtered /scanback_filtered">
        <remap from="scan" to="scan360_filtered"/>
   </node>-->


  <node pkg="laser_assembler" type="laser_assembler" name="laser_assembler2" args="/scanfront /scanback">
	<remap from="scan" to="scan360"/>
  </node>


  <!--- amcl -->
  <node pkg="amcl" type="amcl" name="amcl" args="scan:=/scan360">
	<param name="use_map_topic" value="true" />
    <param name="odom_model_type" value="diff"/>
    <param name="transform_tolerance" value="0.9" /> 
    <param name="gui_publish_rate" value="10.0"/>
    <param name="laser_max_beams" value="50"/>
    <param name="min_particles" value="200"/> 
    <param name="max_particles" value="1000"/> 
    <param name="kld_err" value="0.05"/>
    <param name="kld_z" value="0.99"/>
    <param name="odom_alpha1" value="0.2"/>
    <param name="odom_alpha2" value="0.1"/>
    <!-- translation std dev, m -->
    <param name="odom_alpha3" value="0.2"/>
    <param name="odom_alpha4" value="0.1"/>
    <param name="odom_alpha5" value="0.0"/>
    <param name="laser_max_range" value="10"/> 
    <param name="laser_min_range" value="0.5"/> 
    <param name="laser_z_hit" value="0.85"/> 
    <param name="laser_z_short" value="0.05"/>
    <param name="laser_z_max" value="0.05"/>
    <param name="laser_z_rand" value="0.05"/> 
    <param name="laser_sigma_hit" value="0.05"/> 
    <param name="laser_lambda_short" value="0.1"/>
    <param name="laser_model_type" value="likelihood_field"/>
    <!-- <param name="laser_model_type" value="beam"/> -->
    <param name="laser_likelihood_max_dist" value="2.0"/>
    <param name="update_min_d" value="0.3"/>
    <param name="update_min_a" value="0.2"/>
    <param name="odom_frame_id" value="/odom"/>
    <param name="base_frame_id" value="/base_link"/>
    <param name="global_frame_id" value="/map"/>
    <param name="resample_interval" value="2"/>
    <param name="recovery_alpha_slow" value="0"/> 
    <param name="recovery_alpha_fast" value="0"/> 
    <param name="initial_pose_x" value="10.92" /> 
    <param name="initial_pose_y" value="2.73" /> 
    <param name="initial_pose_a" value="2.98" />
  </node>


   <!-- UPO robot navigation system -->
   <node pkg="upo_navigation" type="upo_navigation_node" respawn="false" name="upo_navigation_node" output="screen"  >
	<remap from="/upo_navigation_simple/goal" to="/move_base_simple/goal" />
	<rosparam file="$(find upo_launchers)/params_nav/navigation_params.yaml" command="load" />
	<rosparam file="$(find upo_launchers)/params_nav/costmap_common_params.yaml" command="load" ns="global_costmap" />
	<rosparam file="$(find upo_launchers)/params_nav/costmap_common_params.yaml" command="load" ns="local_costmap" />
	<rosparam file="$(find upo_launchers)/params_nav/local_costmap_params.yaml" command="load" />
	<rosparam file="$(find upo_launchers)/params_nav/global_costmap_params.yaml" command="load" />
  </node>

  
  <!--UPO navigation system by using the macro-actions -->
  <!--<node pkg="upo_navigation_macro_actions" type="upo_navigation_macro_actions" name="upo_navigation_macro_actions" output="screen" >-->
		<!-- frecuency of checking the block situation (seconds)-->
		<!--<param name="secs_to_check_block" type="double" value="8.0" /> -->
		<!-- minimum distance that the robot should have moved in "secs_to_check_block" time from 
		its position to determine a blocked situation -->
		<!--<param name="block_dist" type="double" value="0.4" /> -->
		<!--Time (seconds) for waiting action until checking if path cleared or not -->
		<!--<param name="secs_to_wait" type="double" value="8.0" />-->
		<!-- Take into account the person orientation or group orientation to perform an approach. NOT IMPLEMENTED YET -->
		<!--<param name="social_approaching" value="false" />-->
		<!-- frequency of the macro actions 
		<param name="control_frequency" value="15.0" />

		<remap from="/upo_navigation_simple/goal" to="/move_base_simple/goal" />
		<rosparam file="$(find upo_launchers)/params_nav/navigation_params.yaml" command="load"  />
		<rosparam file="$(find upo_launchers)/params_nav/costmap_common_params.yaml" command="load" ns="global_costmap" />
		<rosparam file="$(find upo_launchers)/params_nav/costmap_common_params.yaml" command="load" ns="local_costmap" />
		<rosparam file="$(find upo_launchers)/params_nav/local_costmap_params.yaml" command="load"  />
		<rosparam file="$(find upo_launchers)/params_nav/global_costmap_params.yaml" command="load" />

	</node> -->


</launch>
